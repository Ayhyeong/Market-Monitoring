import React, { useEffect, useMemo, useRef, useState } from "react";

/** =========================
 *  Constants & Utilities
 *  ========================= */
const LS_KEY = "daily_notes_v2"; // bump key to avoid conflicting old shape

const fmtDate = (ts: number | Date) => {
  const d = ts instanceof Date ? ts : new Date(ts);
  const yyyy = d.getFullYear();
  const mm = String(d.getMonth() + 1).padStart(2, "0");
  const dd = String(d.getDate()).padStart(2, "0");
  return `${yyyy}-${mm}-${dd}`;
};

function uid() {
  // Prefer strong randomness when available
  // @ts-ignore
  if (globalThis.crypto?.randomUUID) return globalThis.crypto.randomUUID();
  return Math.random().toString(36).slice(2) + Date.now().toString(36);
}

function classNames(...xs: Array<string | false | null | undefined>) {
  return xs.filter(Boolean).join(" ");
}

/** =========================
 *  Types
 *  ========================= */
export type Note = {
  id: string;
  title: string;
  content: string;
  /** ISO YYYY-MM-DD for sorting; not an edit history */
  date: string;
};

/** =========================
 *  Seed / Storage
 *  ========================= */
function seedNotes(): Note[] {
  const now = Date.now();
  const day = 24 * 60 * 60 * 1000;
  return [
    {
      id: uid(),
      title: `2025-10-16 Euro Area Industrial Production`,
      content: `# ALERT — Daily macro releases

**Trigger status:**  
(a) **FIRED** — official release(s) within the past 24h. (b) **NOT FIRED** — no verified ≥1σ consensus surprise detected.

1. **When (KST):**  
• **2025-10-15 18:00 KST** — Eurostat euro area **Industrial Production (Aug)**.

2. **What moved:**  
• **Euro area Industrial Production (Aug): −1.2% m/m; +1.1% y/y.** First estimate from Eurostat. Coverage from major outlets frames this as a renewed monthly decline after July’s +0.5% (rev). Consensus indications suggest a modest miss/near-consensus outcome.

3. **Why it matters (policy/market):**  
• IP is a key high-frequency input for euro area GDP nowcasts; a broad m/m drop led by **capital goods (−2.2%)** points to softer investment momentum and adds mild **dovish** bias at the margin for the **ECB** if weakness persists.

# Immediate Actions
(요약된 시드 콘텐츠)`,
      date: fmtDate(now),
    },
    {
      id: uid(),
      title: `노트 — ${fmtDate(now - day)}`,
      content: "???",
      date: fmtDate(now - day),
    },
  ];
}

function migrateNotes(raw: unknown): Note[] | null {
  try {
    const arr = Array.isArray(raw) ? raw : JSON.parse(String(raw));
    if (!Array.isArray(arr)) return null;
    // Map possible old shapes to new Note
    const mapped: Note[] = arr.map((n: any) => ({
      id: String(n?.id ?? uid()),
      title: String(n?.title ?? ""),
      content: String(n?.content ?? ""),
      date: typeof n?.date === "string" && /^\d{4}-\d{2}-\d{2}$/.test(n.date) ? n.date : fmtDate(Date.now()),
    }));
    return mapped;
  } catch {
    return null;
  }
}

function loadNotes(): Note[] {
  const rawV2 = localStorage.getItem(LS_KEY);
  if (rawV2) {
    const migrated = migrateNotes(rawV2);
    if (migrated) return migrated;
  }

  // Try legacy key (v1) for migration
  const rawV1 = localStorage.getItem("daily_notes_v1");
  if (rawV1) {
    const migrated = migrateNotes(rawV1);
    if (migrated) {
      localStorage.setItem(LS_KEY, JSON.stringify(migrated));
      return migrated;
    }
  }

  const seeded = seedNotes();
  localStorage.setItem(LS_KEY, JSON.stringify(seeded));
  return seeded;
}

function saveNotes(notes: Note[]) {
  localStorage.setItem(LS_KEY, JSON.stringify(notes));
}

/** Debounce helper */
function useDebouncedEffect(effect: () => void, deps: any[], delay: number) {
  useEffect(() => {
    const h = setTimeout(effect, delay);
    return () => clearTimeout(h);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

/** Click-away hook */
function useClickAway<T extends HTMLElement>(onAway: () => void) {
  const ref = useRef<T | null>(null);
  useEffect(() => {
    function handler(e: MouseEvent) {
      if (!ref.current) return;
      const t = e.target as Node;
      if (!ref.current.contains(t)) onAway();
    }
    document.addEventListener("mousedown", handler);
    return () => document.removeEventListener("mousedown", handler);
  }, [onAway]);
  return ref;
}

/** =========================
 *  UI Bits
 *  ========================= */
function Toast({ msg, onDone }: { msg: string; onDone: () => void }) {
  useEffect(() => {
    const id = setTimeout(onDone, 1600);
    return () => clearTimeout(id);
  }, [onDone]);
  return (
    <div className="fixed bottom-6 right-6 rounded-2xl px-4 py-2 shadow-lg bg-gray-900 text-white text-sm">
      {msg}
    </div>
  );
}

/** =========================
 *  App
 *  ========================= */
export default function NotesApp() {
  const [notes, setNotes] = useState<Note[]>(() => loadNotes());
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [toast, setToast] = useState<string | null>(null);

  /** Persist notes with debounce to reduce writes while typing */
  useDebouncedEffect(() => saveNotes(notes), [notes], 400);

  /** Sort by date(desc), then id(desc) for stability */
  const sorted = useMemo(() => {
    const arr = [...notes];
    arr.sort((a, b) => {
      if (a.date === b.date) return b.id.localeCompare(a.id);
      return b.date.localeCompare(a.date);
    });
    return arr;
  }, [notes]);

  const selected = useMemo(
    () => (selectedId ? sorted.find((n) => n.id === selectedId) ?? null : null),
    [sorted, selectedId]
  );

  /** Initial selection: deep link ?note=... or none (home) */
  useEffect(() => {
    const u = new URL(window.location.href);
    const q = u.searchParams.get("note");
    if (q && notes.some((n) => n.id === q)) {
      setSelectedId(q);
    } else if (q) {
      setToast("존재하지 않는 노트 링크입니다.");
      setSelectedId(null);
    } else {
      setSelectedId(null); // go to Home by default
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  /** Helpers */
  function selectNote(id: string) {
    setSelectedId(id);
    const url = new URL(window.location.href);
    url.searchParams.set("note", id);
    window.history.replaceState(null, "", url.toString());
  }

  function goHome() {
    setSelectedId(null);
    const url = new URL(window.location.href);
    window.history.replaceState(null, "", url.toString());
  }

  function shareNote(id: string) {
    const url = `${window.location.origin}${window.location.pathname}?note=${encodeURIComponent(id)}`;
    // Try Clipboard API; fallback to execCommand for insecure contexts
    // @ts-ignore
    const write = globalThis.navigator?.clipboard?.writeText;
    if (typeof write === "function") {
      write(url)
        .then(() => setToast("공유 링크가 복사되었습니다."))
        .catch(() => fallbackCopy(url));
    } else {
      fallbackCopy(url);
    }
  }

  function fallbackCopy(text: string) {
    const i = document.createElement("input");
    i.value = text;
    document.body.appendChild(i);
    i.select();
    document.execCommand("copy");
    i.remove();
    setToast("공유 링크가 복사되었습니다.");
  }

  return (
    <div className="w-full h-screen flex bg-gray-50 text-gray-900">
      {/* Sidebar */}
      <aside
        className={classNames(
          "relative h-full transition-all duration-300 ease-in-out bg-white border-r border-gray-200 shadow-sm",
          sidebarOpen ? "w-80" : "w-16"
        )}
        aria-label="노트 사이드바"
      >
        <div className="flex items-center justify-between gap-2 p-3 border-b border-gray-100">
          {/* Home button is fully hidden in compact (match html behavior) */}
          {sidebarOpen && (
            <button
              type="button"
              className="px-3 py-2 rounded-xl bg-gray-100 hover:bg-gray-200 text-sm font-medium"
              onClick={goHome}
              title="홈"
              aria-label="홈으로 이동"
            >
              홈
            </button>
          )}
          <button
            type="button"
            className="px-3 py-2 rounded-xl bg-gray-100 hover:bg-gray-200 text-sm whitespace-nowrap min-w-[92px]"
            onClick={() => setSidebarOpen((s) => !s)}
            title="사이드바 열기/닫기"
            aria-controls="sidebar"
            aria-expanded={sidebarOpen}
          >
            {sidebarOpen ? "닫기" : "열기"}
          </button>
        </div>

        <div id="sidebar" className="overflow-y-auto h-[calc(100%-56px)] p-2">
          {sorted.map((n) => (
            <NoteListItem
              key={n.id}
              note={n}
              active={selected?.id === n.id}
              compact={!sidebarOpen}
              onSelect={() => selectNote(n.id)}
              onShare={() => shareNote(n.id)}
            />
          ))}
        </div>
      </aside>

      {/* Main */}
      <main className="flex-1 h-full flex flex-direction-col">
        <div className="h-14 flex items-center justify-between px-4 border-b border-gray-200 bg-white">
          <div className="font-semibold truncate">{selected ? selected.title || "(제목 없음)" : "홈"}</div>
          {!sidebarOpen && (
            <button
              type="button"
              className="px-3 py-2 rounded-xl bg-gray-100 hover:bg-gray-200 text-sm whitespace-nowrap min-w-[110px]"
              onClick={() => setSidebarOpen(true)}
              title="사이드바 열기"
              aria-controls="sidebar"
              aria-expanded={true}
            >
              사이드바 열기
            </button>
          )}
        </div>
        <div className="flex-1 overflow-hidden" aria-live="polite">
          {selected ? (
            <Editor key={selected.id} note={selected} onChange={(val) => updateNoteContent(selected.id, val)} />
          ) : (
            <div className="h-full grid place-items-center text-gray-500">좌측에서 노트를 선택하세요.</div>
          )}
        </div>
      </main>

      {toast && <Toast msg={toast} onDone={() => setToast(null)} />}
    </div>
  );
}

/** =========================
 *  Note List Item with A11y Menu
 *  ========================= */
function NoteListItem({
  note,
  active,
  compact,
  onSelect,
  onShare,
}: {
  note: Note;
  active: boolean;
  compact: boolean;
  onSelect: () => void;
  onShare: () => void;
}) {
  const [menuOpen, setMenuOpen] = useState(false);
  const menuRef = useClickAway<HTMLDivElement>(() => setMenuOpen(false));

  return (
    <div
      className={classNames(
        "group relative flex items-center gap-2 w-full cursor-pointer rounded-xl px-3 py-2 mb-1",
        active ? "bg-indigo-50 border border-indigo-200" : "hover:bg-gray-100"
      )}
      onClick={onSelect}
      role="listitem"
      aria-pressed={active}
    >
      <div className="flex-1 min-w-0">
        <div className="flex items-center justify-between gap-2">
          <div className="truncate text-sm font-medium">{note.title || "(제목 없음)"}</div>
          <button
            type="button"
            className="opacity-0 group-hover:opacity-100 transition-opacity text-gray-500 hover:text-gray-900 px-2"
            onClick={(e) => {
              e.stopPropagation();
              setMenuOpen((v) => !v);
            }}
            aria-label="더보기"
            aria-haspopup="menu"
            aria-expanded={menuOpen}
            title="더보기"
          >
            …
          </button>
        </div>
      </div>

      {menuOpen && (
        <div
          ref={menuRef}
          className="absolute right-2 top-10 z-20 w-44 rounded-xl border border-gray-200 bg-white shadow-lg overflow-hidden p-1"
          role="menu"
          aria-label="노트 메뉴"
          onClick={(e) => e.stopPropagation()}
        >
          <MenuItem label="공유 링크 복사" onClick={() => { onShare(); setMenuOpen(false); }} />
        </div>
      )}
    </div>
  );
}

function MenuItem({ label, onClick }: { label: string; onClick: () => void }) {
  return (
    <button
      type="button"
      className="w-full text-left px-3 py-2 text-sm rounded-lg hover:bg-gray-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-indigo-500"
      role="menuitem"
      onClick={(e) => {
        e.stopPropagation();
        onClick();
      }}
      onKeyDown={(e) => {
        if (e.key === "Escape") {
          (e.target as HTMLButtonElement).blur();
        }
      }}
    >
      {label}
    </button>
  );
}

/** =========================
 *  Editor with debounced onChange
 *  ========================= */
function Editor({ note, onChange }: { note: Note; onChange: (v: string) => void }) {
  const [val, setVal] = useState(note.content);

  // Sync when note changes
  useEffect(() => setVal(note.content), [note.id, note.content]);

  // Debounce push-updates to parent for performance
  useDebouncedEffect(() => onChange(val), [val], 300);

  return (
    <textarea
      className="w-full h-full resize-none p-4 focus:outline-none bg-white"
      placeholder="여기에 노트를 작성하세요…"
      value={val}
      onChange={(e) => setVal(e.target.value)}
    />
  );
}
